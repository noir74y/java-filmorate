DROP TABLE IF EXISTS likes;
DROP TABLE IF EXISTS friends;
DROP TABLE IF EXISTS users;

DROP TABLE IF EXISTS genres;
DROP TABLE IF EXISTS genre;
DROP TABLE IF EXISTS films;
DROP TABLE IF EXISTS mpa;

CREATE TABLE mpa (
    id integer PRIMARY KEY,
    name VARCHAR(256) NOT NULL
);

ALTER TABLE mpa ADD CONSTRAINT mpa_name_unique UNIQUE(name);

CREATE TABLE films (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(256),
    description text,
    release_date DATE,
    duration BIGINT,
    mpa_id INTEGER REFERENCES mpa (id)
);

CREATE TABLE genre (
    id INTEGER PRIMARY KEY,
    name VARCHAR(256) NOT NULL
);

ALTER TABLE genre ADD CONSTRAINT genre_name_unique UNIQUE(name);

CREATE TABLE genres (
    film_id INTEGER REFERENCES films (id),
    genre_id INTEGER REFERENCES genre (id)
);

ALTER TABLE genres ADD CONSTRAINT genres_unique UNIQUE(film_id, genre_id);

CREATE TABLE users (
    id INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    email VARCHAR(256),
    login VARCHAR(256),
    name VARCHAR(256),
    birthday DATE
);

ALTER TABLE users ADD CONSTRAINT users_email_unique UNIQUE(email);
ALTER TABLE users ADD CONSTRAINT users_login_unique UNIQUE(login);

CREATE TABLE friends (
    user_id INTEGER REFERENCES users (id),
    friend_id INTEGER REFERENCES users (id)
);

ALTER TABLE friends ADD CONSTRAINT friends_unique UNIQUE(user_id, friend_id);

CREATE TABLE likes (
    user_id INTEGER REFERENCES users (id),
    film_id INTEGER REFERENCES films (id)
);

ALTER TABLE likes ADD CONSTRAINT likes_unique UNIQUE(user_id, film_id);